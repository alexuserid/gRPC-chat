// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chat.proto

package communication

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_703a2245d1f74b42, []int{0}
}
func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (dst *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(dst, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Username struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Username) Reset()         { *m = Username{} }
func (m *Username) String() string { return proto.CompactTextString(m) }
func (*Username) ProtoMessage()    {}
func (*Username) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_703a2245d1f74b42, []int{1}
}
func (m *Username) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Username.Unmarshal(m, b)
}
func (m *Username) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Username.Marshal(b, m, deterministic)
}
func (dst *Username) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Username.Merge(dst, src)
}
func (m *Username) XXX_Size() int {
	return xxx_messageInfo_Username.Size(m)
}
func (m *Username) XXX_DiscardUnknown() {
	xxx_messageInfo_Username.DiscardUnknown(m)
}

var xxx_messageInfo_Username proto.InternalMessageInfo

func (m *Username) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Sid struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Sid) Reset()         { *m = Sid{} }
func (m *Sid) String() string { return proto.CompactTextString(m) }
func (*Sid) ProtoMessage()    {}
func (*Sid) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_703a2245d1f74b42, []int{2}
}
func (m *Sid) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Sid.Unmarshal(m, b)
}
func (m *Sid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Sid.Marshal(b, m, deterministic)
}
func (dst *Sid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sid.Merge(dst, src)
}
func (m *Sid) XXX_Size() int {
	return xxx_messageInfo_Sid.Size(m)
}
func (m *Sid) XXX_DiscardUnknown() {
	xxx_messageInfo_Sid.DiscardUnknown(m)
}

var xxx_messageInfo_Sid proto.InternalMessageInfo

func (m *Sid) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type Userlist struct {
	Username             []string `protobuf:"bytes,1,rep,name=Username,proto3" json:"Username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Userlist) Reset()         { *m = Userlist{} }
func (m *Userlist) String() string { return proto.CompactTextString(m) }
func (*Userlist) ProtoMessage()    {}
func (*Userlist) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_703a2245d1f74b42, []int{3}
}
func (m *Userlist) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Userlist.Unmarshal(m, b)
}
func (m *Userlist) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Userlist.Marshal(b, m, deterministic)
}
func (dst *Userlist) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Userlist.Merge(dst, src)
}
func (m *Userlist) XXX_Size() int {
	return xxx_messageInfo_Userlist.Size(m)
}
func (m *Userlist) XXX_DiscardUnknown() {
	xxx_messageInfo_Userlist.DiscardUnknown(m)
}

var xxx_messageInfo_Userlist proto.InternalMessageInfo

func (m *Userlist) GetUsername() []string {
	if m != nil {
		return m.Username
	}
	return nil
}

type Message struct {
	Sid  string `protobuf:"bytes,1,opt,name=sid,proto3" json:"sid,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are valid to be assigned to Data:
	//	*Message_Text
	//	*Message_Status
	Data                 isMessage_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_chat_703a2245d1f74b42, []int{4}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (dst *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(dst, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

type isMessage_Data interface {
	isMessage_Data()
}

type Message_Text struct {
	Text string `protobuf:"bytes,3,opt,name=text,proto3,oneof"`
}
type Message_Status struct {
	Status string `protobuf:"bytes,4,opt,name=status,proto3,oneof"`
}

func (*Message_Text) isMessage_Data()   {}
func (*Message_Status) isMessage_Data() {}

func (m *Message) GetData() isMessage_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Message) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *Message) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Message) GetText() string {
	if x, ok := m.GetData().(*Message_Text); ok {
		return x.Text
	}
	return ""
}

func (m *Message) GetStatus() string {
	if x, ok := m.GetData().(*Message_Status); ok {
		return x.Status
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_Text)(nil),
		(*Message_Status)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// data
	switch x := m.Data.(type) {
	case *Message_Text:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Text)
	case *Message_Status:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Status)
	case nil:
	default:
		return fmt.Errorf("Message.Data has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 3: // data.text
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Data = &Message_Text{x}
		return true, err
	case 4: // data.status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Data = &Message_Status{x}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// data
	switch x := m.Data.(type) {
	case *Message_Text:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Text)))
		n += len(x.Text)
	case *Message_Status:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Status)))
		n += len(x.Status)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Empty)(nil), "communication.Empty")
	proto.RegisterType((*Username)(nil), "communication.Username")
	proto.RegisterType((*Sid)(nil), "communication.Sid")
	proto.RegisterType((*Userlist)(nil), "communication.Userlist")
	proto.RegisterType((*Message)(nil), "communication.Message")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatClient interface {
	Login(ctx context.Context, in *Username, opts ...grpc.CallOption) (*Sid, error)
	Logout(ctx context.Context, in *Sid, opts ...grpc.CallOption) (*Empty, error)
	ShowUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Userlist, error)
	SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Empty, error)
	Flow(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Chat_FlowClient, error)
}

type chatClient struct {
	cc *grpc.ClientConn
}

func NewChatClient(cc *grpc.ClientConn) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) Login(ctx context.Context, in *Username, opts ...grpc.CallOption) (*Sid, error) {
	out := new(Sid)
	err := c.cc.Invoke(ctx, "/communication.Chat/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) Logout(ctx context.Context, in *Sid, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/communication.Chat/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) ShowUsers(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Userlist, error) {
	out := new(Userlist)
	err := c.cc.Invoke(ctx, "/communication.Chat/ShowUsers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SendMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/communication.Chat/SendMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) Flow(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Chat_FlowClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Chat_serviceDesc.Streams[0], "/communication.Chat/Flow", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatFlowClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Chat_FlowClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type chatFlowClient struct {
	grpc.ClientStream
}

func (x *chatFlowClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServer is the server API for Chat service.
type ChatServer interface {
	Login(context.Context, *Username) (*Sid, error)
	Logout(context.Context, *Sid) (*Empty, error)
	ShowUsers(context.Context, *Empty) (*Userlist, error)
	SendMessage(context.Context, *Message) (*Empty, error)
	Flow(*Empty, Chat_FlowServer) error
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Username)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Chat/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Login(ctx, req.(*Username))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Sid)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Chat/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Logout(ctx, req.(*Sid))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_ShowUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).ShowUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Chat/ShowUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).ShowUsers(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SendMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SendMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/communication.Chat/SendMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SendMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_Flow_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServer).Flow(m, &chatFlowServer{stream})
}

type Chat_FlowServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type chatFlowServer struct {
	grpc.ServerStream
}

func (x *chatFlowServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "communication.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Chat_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _Chat_Logout_Handler,
		},
		{
			MethodName: "ShowUsers",
			Handler:    _Chat_ShowUsers_Handler,
		},
		{
			MethodName: "SendMessage",
			Handler:    _Chat_SendMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Flow",
			Handler:       _Chat_Flow_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "chat.proto",
}

func init() { proto.RegisterFile("chat.proto", fileDescriptor_chat_703a2245d1f74b42) }

var fileDescriptor_chat_703a2245d1f74b42 = []byte{
	// 290 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0x41, 0x4f, 0xb3, 0x40,
	0x10, 0xfd, 0x80, 0x2d, 0xfd, 0x18, 0xa3, 0x31, 0x93, 0xaa, 0x84, 0x83, 0x69, 0x38, 0x98, 0x9e,
	0x88, 0xa9, 0xc6, 0x83, 0xde, 0x34, 0x1a, 0x0f, 0xf5, 0x02, 0xf1, 0x07, 0xac, 0xb0, 0x81, 0x4d,
	0x0a, 0xdb, 0x74, 0x87, 0x54, 0x7f, 0x8e, 0xff, 0xd4, 0xb0, 0x52, 0x1a, 0x09, 0x9c, 0x98, 0x79,
	0x6f, 0x78, 0x6f, 0xe6, 0x65, 0x01, 0xd2, 0x82, 0x53, 0xb4, 0xd9, 0x2a, 0x52, 0x78, 0x9c, 0xaa,
	0xb2, 0xac, 0x2b, 0x99, 0x72, 0x92, 0xaa, 0x0a, 0xa7, 0x30, 0x79, 0x2e, 0x37, 0xf4, 0x15, 0x5e,
	0xc2, 0xff, 0x77, 0x2d, 0xb6, 0x15, 0x2f, 0x05, 0x22, 0xb0, 0xe6, 0xeb, 0x5b, 0x73, 0x6b, 0xe1,
	0xc5, 0xa6, 0x0e, 0xcf, 0xc0, 0x49, 0x64, 0x86, 0x27, 0x60, 0xcb, 0xac, 0x25, 0x6c, 0x99, 0x85,
	0x57, 0xbf, 0xbf, 0xad, 0xa5, 0x26, 0x0c, 0x0e, 0x12, 0xbe, 0x35, 0x77, 0x16, 0x5e, 0xdc, 0xf5,
	0x61, 0x0e, 0xd3, 0x37, 0xa1, 0x35, 0xcf, 0x05, 0x9e, 0x82, 0xa3, 0x3b, 0x8d, 0xa6, 0xec, 0xfc,
	0xec, 0x83, 0x1f, 0xce, 0x80, 0x91, 0xf8, 0x24, 0xdf, 0x69, 0xb0, 0xd7, 0x7f, 0xb1, 0xe9, 0xd0,
	0x07, 0x57, 0x13, 0xa7, 0x5a, 0xfb, 0xac, 0xc5, 0xdb, 0xfe, 0xd1, 0x05, 0x96, 0x71, 0xe2, 0xcb,
	0x6f, 0x1b, 0xd8, 0x53, 0xc1, 0x09, 0x6f, 0x61, 0xb2, 0x52, 0xb9, 0xac, 0xf0, 0x22, 0xfa, 0x73,
	0x72, 0xb4, 0xdf, 0x29, 0xc0, 0x1e, 0xd1, 0xdc, 0xb7, 0x04, 0x77, 0xa5, 0x72, 0x55, 0x13, 0x0e,
	0xb0, 0xc1, 0xac, 0x87, 0x99, 0xe8, 0xf0, 0x1e, 0xbc, 0xa4, 0x50, 0xbb, 0x46, 0x57, 0xe3, 0xe0,
	0x48, 0x30, 0xb4, 0x83, 0xc9, 0xec, 0x01, 0x8e, 0x12, 0x51, 0x65, 0xfb, 0x6c, 0xce, 0x7b, 0x73,
	0x2d, 0x3e, 0x62, 0x7c, 0x07, 0xec, 0x65, 0xad, 0x76, 0x23, 0x9e, 0x23, 0x5a, 0xd7, 0xd6, 0x87,
	0x6b, 0x9e, 0xc2, 0xcd, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xaf, 0xfe, 0x53, 0x93, 0x18, 0x02,
	0x00, 0x00,
}
